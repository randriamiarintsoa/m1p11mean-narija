import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { Chart as ChartJS, ChartData, ChartOptions, ChartType, Plugin } from 'chart.js';
import * as i0 from "@angular/core";
export declare class ChartjsComponent implements AfterViewInit, OnDestroy, OnChanges {
    private readonly ngZone;
    private readonly renderer;
    private readonly changeDetectorRef;
    /**
     * Enables custom html based tooltips instead of standard tooltips.
     * @type boolean
     * @default true
     */
    customTooltips: boolean;
    /**
     * The data object that is passed into the Chart.js chart (more info).
     */
    data?: ChartData;
    /**
     * Height attribute applied to the rendered canvas.
     * @type number | undefined
     * @default 150
     */
    height?: number;
    /**
     * ID attribute applied to the rendered canvas.
     * @type string
     */
    id: string;
    /**
     * The options object that is passed into the Chart.js chart.
     */
    options?: ChartOptions;
    /**
     * The plugins array that is passed into the Chart.js chart
     */
    plugins: Plugin[];
    /**
     * If true, will tear down and redraw chart on all updates.
     * @type boolean
     * @default false
     */
    redraw: boolean;
    /**
     * Chart.js chart type.
     * @type {'line' | 'bar' | 'radar' | 'doughnut' | 'polarArea' | 'bubble' | 'pie' | 'scatter'}
     */
    type: ChartType;
    /**
     * Width attribute applied to the rendered canvas.
     * @type number | undefined
     * @default 300
     */
    width?: number;
    /**
     * Put the chart into the wrapper div element.
     * @default true
     */
    wrapper: boolean;
    readonly getDatasetAtEvent: EventEmitter<any>;
    readonly getElementAtEvent: EventEmitter<any>;
    readonly getElementsAtEvent: EventEmitter<any>;
    readonly chartRef: EventEmitter<any>;
    canvasElement: ElementRef;
    chart: ChartJS;
    ctx: CanvasRenderingContext2D;
    get hostClasses(): {
        'chart-wrapper': boolean;
    };
    constructor(ngZone: NgZone, renderer: Renderer2, changeDetectorRef: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    handleClick($event: MouseEvent): void;
    chartDestroy(): void;
    chartRender(): void;
    chartUpdate(): void;
    private chartUpdateOutsideAngular;
    chartToBase64Image(): string | undefined;
    private chartDataConfig;
    private chartOptions;
    private chartConfig;
    private chartCustomTooltips;
    static ɵfac: i0.ɵɵFactoryDeclaration<ChartjsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ChartjsComponent, "c-chart", ["cChart"], { "customTooltips": { "alias": "customTooltips"; "required": false; }; "data": { "alias": "data"; "required": false; }; "height": { "alias": "height"; "required": false; }; "id": { "alias": "id"; "required": false; }; "options": { "alias": "options"; "required": false; }; "plugins": { "alias": "plugins"; "required": false; }; "redraw": { "alias": "redraw"; "required": false; }; "type": { "alias": "type"; "required": false; }; "width": { "alias": "width"; "required": false; }; "wrapper": { "alias": "wrapper"; "required": false; }; }, { "getDatasetAtEvent": "getDatasetAtEvent"; "getElementAtEvent": "getElementAtEvent"; "getElementsAtEvent": "getElementsAtEvent"; "chartRef": "chartRef"; }, never, ["*"], true, never>;
    static ngAcceptInputType_customTooltips: unknown;
    static ngAcceptInputType_height: string | number;
    static ngAcceptInputType_redraw: unknown;
    static ngAcceptInputType_width: string | number;
    static ngAcceptInputType_wrapper: unknown;
}
